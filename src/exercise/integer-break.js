/**
 * 给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
说明: 你可以假设 n 不小于 2 且不大于 58。

 */

/**
 * 参考答案:
 *
 * 题目中“n 至少可以拆分为两个正整数的和”, 这个条件说明 n 是大于 1 的整数
 * 对 7 来说, 可以拆成 3 + 4, 最大的乘积是 12;
 *
 * 对 8 来说, 可以拆成 3+3+2, 最大的乘积是 18
 *
 *
 * 解法一: 动态规划法
 *
 * 状态数组中 dp[i] 表示: 数字 i 拆分为至少两个整数和的最大乘积. 为了方便计算
 *
 * dp 的长度 n + 1, 值初始化为 1
 *
 * 显然 dp[2] 等于 1, 外层循环从 3 开始遍历,一直到 n 停止. 内层循环 j 从 1 开始遍历
 * -直到 i 之前停止, 他代表着数字 i 可以拆分成 j+ (i-j)
 *
 * 但 j * (i - j) 不一定是最大乘积, 因为 i - j 不一定大于 dp[i-j]
 * (数字 i-j 拆分成整数之和的最大乘积),这里要选择最大的值作为 dp[i]的结果
 *
 * 空间复杂度是 O(N), 时间复杂度 O(N2)
 * @param {*} n
 */
export const integerBreak1 = function (n) {
    const dp = new Array(n + 1).fill(1);

    for (let i = 3; i <= n; ++i) {
        for (let j = 1; j < i; ++j) {
            dp[i] = Math.max(dp[i], j * (i - j), j * dp[i - j]);
        }
    }
    return dp[n];
};

/**
 * 解法2: 贪心法
 *
 * 算法的整体思路是:
 *
 * n除3 的结果 为a, 余数是 b
 * 当 b为 0 , 直接将a个3相乘
 * 当b 为1, 将(a-1)个3相乘,再乘以4
 * 当b为2, 将 a 个 3 相乘 ,再乘以2
 *
 * 空间复杂度是 O(1), 时间复杂度是 O(1)
 */

export const integerBreak2 = function (n) {
    if (n === 2) return 1;

    if (n === 3) return 2;

    const a = Math.floor(n / 3);
    const b = n % 3;

    if (b === 0) return Math.pow(3, a);

    if (b === 1) return Math.pow(3, a - 1) * 4;

    return Math.pow(3, a) * 2;
};
